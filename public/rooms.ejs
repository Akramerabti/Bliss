<%- include('partials/header'); -%>

      <div class="roomcontainer">
        <div class="roomcreationcontainer">
          <button  class="btn" id="group-formbutton">ðŸ“Ÿ</button>
          <form action="/groupchat" id="groupchat-entering" style="display: none;">
            <div class="form-control" >
              <label for ="group"> Recommended Groups </label>
               <input
                type = "text"
                name = "GroupID"
                id="GroupID"
                placeholder="Enter a url"
                />
                <div class="flex">
                  <button type="submit" class="btn" onclick="redirectToURL()">Join group</button>
                </div>
                <div class="flex">
                  <button type= "submit" class="btn">+</button>
                </div>
            </div>
          </form >
      <button  class="btn" id="personal-formbutton">ðŸ“Ÿ</button>
      <form action="/personal" id="personal-entering" style="display: none;">
        <div class="form-control" >
          <label for ="personal"> Public collaboardation:</label>
           <input
            type = "text"
            name = "name"
            id="room"
            placeholder="Enter User's name"
            required
            />
            <div class="flex">
              <button type="submit" class="btn">Chat to specific user</button>
            </div>
        </div>
      </form >
      <button  class="btn" id="public-formbutton">ðŸ“Ÿ</button>
        <form action="/chat" id="chat-entering" style="display: none;">
          <div class="form-control" id="chat-entering">
            <label for ="room"> Public collaboardation:</label>
             <input
              type = "text"
              name = "room"
              id="room"
              placeholder="Enter/Create Public Server"
              required
              />
              <div class="flex">
                <button type="submit" class="btn">Login to Chat</button>
              </div>  
        </form>
        </div>
      </div>
        <div class="friends-groups-container">
          <h2>Your Friends</h2>
          <ul class="friends-list">
        <% user.Friends.forEach((friend, index) => { %>
         <li>
       <button class="friend-button"> <%= friend.friend %></button>
        </li>
       <% }); %>
        </ul>
          </ul>
    
          <h2>Your Groups</h2>
          <ul class="groups-list">
            <!-- List of groups goes here -->
            <li>
              <button class="group-button">Group 1</button>
            </li>
            <li>
              <button class="group-button">Group 2</button>
            </li>
            <li>
              <button class="group-button">Group 3</button>
            </li>
            <!-- Add more groups as needed -->
          </ul>
        </div>
      </main>
    </div>


    <script>
      // Set a JavaScript variable with the user.name value
      const username = "<%= user.name %>";
      const userID = "<%= user._id %>"
      
    </script>
    <script src="https://cdn.jsdelivr.net/npm/qrious@4.0.2/qrious.min.js"></script>
   <script src="/socket.io/socket.io.js"></script>
   <script src="https://cdnjs.cloudflare.com/ajax/libs/qs/6.11.2/qs.min.js" integrity="sha512-vCegEXqPUYpZsTGz2lk0jaQ1psxtFeniVJACAXhMVxuoYa/N4nZkjoVFOxLwP7uGeQOoemiz7DQrIpRTj4IBPw==" crossorigin="anonymous"></script>
  <script src="main.js"></script>
  <script type="module" src="../partials/Notifs.js"></script> 
  <script>
document.addEventListener("DOMContentLoaded", async function() {

  // Get references to the buttons and form containers
  const personalButton = document.getElementById("personal-formbutton");
  const personalForm = document.getElementById("personal-entering");
  const publicButton = document.getElementById("public-formbutton");
  const publicForm = document.getElementById("chat-entering");
  const groupButton = document.getElementById("group-formbutton");
  const groupForm = document.getElementById("groupchat-entering");
  const friendButtons = document.querySelectorAll('.friend-button');

  async function fetchUserInfoByName(userName) {
    try {
      const response = await fetch(`/findUserByName?name=${userName}`);
      if (response.ok) {
        const userData = await response.json();
        return userData;
      } else {
        console.error(`User information not found for ${userName}`);
        return null;
      }
    } catch (error) {
      console.error('Error fetching user information:', error);
      return null;
    }
  }

  // Function to fetch user data and handle the button
  function createChatButton(button, userInfo) {
  const chatButton = document.createElement('button');
  chatButton.classList.add('chat-button');
  chatButton.textContent = 'Chat to user';

  // Add a click event listener to the "Chat to user" button
  chatButton.addEventListener('click', (e) => {
    e.stopPropagation(); // Stop the event from propagating to the outer button
    window.location.href = `/personal?name=${userInfo.name}`; // Redirect to the chat link
  });

  return chatButton;
}

// Function to fetch user data and handle the button
async function fetchUserDataAndHandleButton(button, messagesender) {
  console.log('Fetching user data for:', messagesender);
  try {
    const response = await fetch(`/profile/${messagesender}`);

    if (response.ok) {
      const userInfo = await fetchUserInfoByName(messagesender);

      if (userInfo) {
        console.log('User data found:', userInfo.thumbnail);

        // Create an image element and set the thumbnail
        const img = document.createElement('img');
        img.classList.add('messageimg');
        img.src = userInfo.thumbnail;
        img.setAttribute('referrerPolicy', 'no-referrer');
        button.appendChild(img);

        // Add a mouseenter event listener to show additional information
        button.addEventListener('mouseenter', () => {
          const hoverContainer = document.createElement('div');
          hoverContainer.classList.add('hover-container-room');
          button.appendChild(hoverContainer);

          // Create and append the "Chat to user" button
          const chatButton = createChatButton(button, userInfo);
          hoverContainer.appendChild(chatButton);
        });

        button.addEventListener('mouseleave', () => {
          const hoverContainer = button.querySelector('.hover-container-room');
          hoverContainer.remove();  
        })

        // Add a click event listener to navigate to the profile page
        button.addEventListener('click', () => {
          window.location.href = `/profile/${messagesender}`;
        });
      }
    } else if (response.status === 500) {
      // Remove the button when the user is not found (500 response)
      button.remove();

      // Attempt to remove the friend on the server
      try {
        const response = await fetch(`/${userID}/removefriend/${messagesender}`, {
          method: 'DELETE',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            friend: messagesender
          })
        });
        if (response.ok) {
          console.log('Friend removed');
        } else {
          console.error('Server error:', response.status);
          // Handle other server errors
        }
      } catch (error) {
        console.error('Error removing friend:', error);
      }
    } else {
      console.error('Server error:', response.status);
      // Handle other server errors
    }
  } catch (error) {
    console.error('Error fetching user profile:', error);
  }
}

// Iterate over friendButtons and fetch user data for each friend
for (const button of friendButtons) {
  const encodedText = button.textContent.trim(); // Remove leading/trailing spaces
  const messagesender = decodeURIComponent(encodedText); // Decode the URL-encoded text

  // Fetch user data and handle the button for each friend
  await fetchUserDataAndHandleButton(button, messagesender);
}

  let isPersonalFormVisible = false;
  let isPublicFormVisible = false;

  // Add click event listener to the personal button
  personalButton.addEventListener("click", () => {
    if (isPersonalFormVisible) {
      // If the personal form is visible, hide it
      personalForm.style.display = "none";
    } else {
      // If the personal form is hidden, show it
      personalForm.style.display = "block";
    }

    // Toggle the state
    isPersonalFormVisible = !isPersonalFormVisible;

    // Always hide the public form when toggling the personal form
    publicForm.style.display = "none";
    groupForm.style.display = "none";
    isPublicFormVisible = false;
  });

  // Add click event listener to the public button
  publicButton.addEventListener("click", () => {
    if (isPublicFormVisible) {
      // If the public form is visible, hide it
      publicForm.style.display = "none";
    } else {
      // If the public form is hidden, show it
      publicForm.style.display = "block";
    }

    // Toggle the state
    isPublicFormVisible = !isPublicFormVisible;

    // Always hide the personal form when toggling the public form
    personalForm.style.display = "none";
    groupForm.style.display = "none";
    isPersonalFormVisible = false;
  });

  groupButton.addEventListener("click", () => {
    if (isPublicFormVisible) {
      // If the public form is visible, hide it
      groupForm.style.display = "none";
    } else {
      // If the public form is hidden, show it
      groupForm.style.display = "block";
    }

    // Toggle the state
    isPublicFormVisible = !isPublicFormVisible;

    // Always hide the personal form when toggling the public form
    personalForm.style.display = "none";
    publicForm.style.display = "none";
    isPersonalFormVisible = false;

  });
});
  </script>
  <%- include('partials/footer'); -%>