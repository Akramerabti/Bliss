<%- include('../public/partials/header'); -%>
<head>
    <meta name="google-signin-client_id" content="YOUR_CLIENT_ID.apps.googleusercontent.com">
</head>
<body>
    
    <h2>Log In</h2>



    <form> <!form for the login system as a method to post>

            <label for ="name">Username or email</label>
            <input placeholder="Name / email" name="name" type="text" required/> <!Box for the username>
            <div class="name error"></div>
        
            <label for ="password">Password</label>
            <input placeholder="Password "  name="password" type="password" required /> <!box for the password with type password so we don't see it>
            <div class="password error"></div>
        
            <button>Login</button>

            <div id="my-signin2"></div>
            <script>
              function onSuccess(googleUser) {
                console.log('Logged in as: ' + googleUser.getBasicProfile().getName());
              }
              function onFailure(error) {
                console.log(error);
              }
              function renderButton() {
                gapi.signin2.render('my-signin2', {
                  'scope': 'profile email',
                  'width': 240,
                  'height': 50,
                  'longtitle': true,
                  'margin-left': 200,
                  'theme': 'dark',
                  'onsuccess': onSuccess,
                  'onfailure': onFailure
                });
              }
            </script>
          
            <script src="https://apis.google.com/js/platform.js?onload=renderButton" async defer></script>
        
    </form>

    <script>
        const form =document.querySelector('form'); //searches for "form" info
        const emailError = document.querySelector('.name.error'); // grabs the "<div>" of email error from the form
        const nameError = document.querySelector('.name.error'); // grabs the "<div>" of email error from the form
        const passwordError = document.querySelector('.password.error'); // grabs the "<div>" of email error from the form
    
        form.addEventListener("submit", async (e) => { //Waits for submit event from input button of form to take in the event object
            e.preventDefault(); //prevents refreshing

            //reset errors everytime there is a submit
        emailError.textContent = "" 
        nameError.textContent = ""
        passwordError.textContent = ""
    
            // get the values
            const email = form.name.value // form.the name of the input to get the value
            const name = form.name.value // form.the name of the input to get the value
            const password = form.password.value // form.the name of the input to get the value
    
            try {
            const res = await fetch('/login', { 
                method: "POST",
                body: JSON.stringify({ name:name, email:email, password:password}), // passing data from the input values to the signup POST function
                headers: { "Content-Type" : "application/json"}
            })

            const data = await res.json() // DATA OF THE JSON RESPONSE OF THE SERVER (most of its response come from the authController. await is when an event is asynchronous, gives back the user id

            if(data.errors){ // if there is errors coming from the json response
                nameError.textContent = data.errors.name // populates the div class email error in the form with the errors handle that we built in authController
                passwordError.textContent =data.errors.password
            }

            if (data.user) {
            const lastDirectory = window.location.pathname.split('/').filter(Boolean).pop();
            location.assign(`/${lastDirectory}`);
            }

        else{ const res = await fetch('/login', { 
                method: "POST",
                body: JSON.stringify({name:name, email:email, password:password}), // passing data from the input values to the signup POST function
                headers: { "Content-Type" : "application/json"}
            })

            const data = await res.json() // DATA OF THE JSON RESPONSE OF THE SERVER (most of its response come from the authController. await is when an event is asynchronous, gives back the user id
            console.log(data);

            if(data.errors){ // if there is errors coming from the json response
                emailError.textContent =data.errors.email // populates the div class email error in the form with the errors handle that we built in authController
                passwordError.textContent =data.errors.password
            }

            if (data.user) {
            const lastDirectory = window.location.pathname.split('/').filter(Boolean).pop();
             location.assign(`/${lastDirectory}`);
}

        }

        } 
         catch (err) {
            console.log(err)

        }


        })
    </script>

<a href="/signup">Sign Up Here</a>

<%- include('../public/partials/footer'); -%>