<%- include('../public/partials/header'); -%>
<style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f0f0f0;
            margin: 0;
            padding: 0;
        }

        header {
            background-color: #3498db;
            color: #fff;
            text-align: center;
            padding: 20px;
        }

        #profile-container {
            max-width: 600px;
            margin: 20px auto;
            background-color: #fff;
            box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.2);
            border-radius: 5px;
            padding: 20px;
        }

        #profile-image {
            width: 150px;
            height: 150px;
            border-radius: 50%;
            margin: 0 auto 20px;
            display: block;
        }

        h1 {
            font-size: 24px;
            margin: 0;
        }

        h2 {
            font-size: 18px;
            margin-top: 5px;
            color: #555;
        }

        p {
            font-size: 16px;
            color: #333;
            margin: 10px 0;
        }

        .tag {
            display: inline-block;
            background-color: #3498db;
            color: #fff;
            padding: 5px 10px;
            margin-right: 5px;
            border-radius: 3px;
            font-size: 14px;
        }

        #friends-list {
            list-style: none;
            padding: 0;
        }

        #friends-list li {
            margin: 5px 0;
        }

        .friend-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            margin-right: 10px;
            vertical-align: middle;
        }

        .friend-name {
            font-size: 16px;
        }

        .details {
            margin-top: 20px;
        }

        .details h3 {
            font-size: 20px;
            margin-bottom: 10px;
        }

        .details p {
            font-size: 16px;
        }

        .edit-button {
            background-color: #3498db;
            color: #fff;
            border: none;
            padding: 5px 10px;
            border-radius: 3px;
            cursor: pointer;
        }
        
        .edit-mode {
            border: 1px solid #3498db;
            padding: 5px;
            border-radius: 3px;
        }

        #file-input-container {
            position: relative;
        }

        #file-input {
            position: absolute;
            opacity: 0;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            cursor: pointer;
        }

        #custom-file-button {
            background-color: #3498db;
            color: #fff;
            border: none;
            padding: 5px 10px;
            border-radius: 3px;
            cursor: pointer;
        }
    </style>
</head>
<body>
    <header>
        <h1>User Profile</h1>
    </header>

    <div id="crop-container" style="display: none;">
            <div class="cropping-interface">
                <div class="circular-cropper">
                    <img id="cropping-image" src="" alt="Cropping Image" class="profile-picture-img" referrerPolicy="no-referrer">
                  </div>
                <div class="zoom-controls">
                    <button class="zoom-button" id="zoom-in">Zoom In</button>
                    <button class="zoom-button" id="zoom-out">Zoom Out</button>
                  </div>
                  
                  <!-- Crop area handles -->
                  <div class="crop-handles"></div>
                  
                  <!-- Aspect ratio options -->
                  <div class="aspect-ratio-options">
                    <label><input type="radio" name="aspect-ratio" value="1:1"> Square</label>
                    <label><input type="radio" name="aspect-ratio" value="4:3"> 4:3</label>
                    <label><input type="radio" name="aspect-ratio" value="16:9"> 16:9</label>
                  </div>
                  
                  <!-- Rotate image -->
                  <button class="rotate-button" id="rotate-left">Rotate Left</button>
                  <button class="rotate-button" id="rotate-right">Rotate Right</button>
                  
                  <!-- Reset, Preview, and Save buttons -->
                  <button class="edit-button" id="reset-button">Reset</button>
                  <button class="edit-button" id="preview-button">Preview</button>

                <button class="edit-button" id="crop-button">Crop and Save</button>
            </div>
            </div>
        </div>

    <form enctype="multipart/form-data" id="profile">
        <div id="profile-container">
            <img id="profile-image" src="<%= specificuser.thumbnail ? specificuser.thumbnail : '/pictures/default-profile-pic.jpg' %>" alt="Profile Picture" class="profile-picture-img" referrerPolicy="no-referrer">
            <button type="button" class="edit-button" onclick="openCropModal()">Edit Profile Picture</button>
            <input type="file" id="profile-image-input" style="display: none;" onchange="handleImageSelection(event)">
            <label for="profile-image-input" id="custom-profile-image-button" class="edit-button">Choose Your Profile Image</label>
        
            <!-- Add the cropping container here -->
            
        
        <h1 id="name"><%= specificuser.name %></h1>
        <button class="edit-button" onclick="toggleEditMode('name')">Edit</button>
        <h2 id="email"><%= specificuser.email %></h2>
        <button class="edit-button" onclick="toggleEditMode('email')">Edit</button>
        <div class="tags">
            <span class="tag">Designer</span>
            <span class="tag">Developer</span>
            <span class="tag">Photographer</span>
        </div>
        <button class="edit-button" onclick="toggleEditMode('tags')">Edit</button>
        <ul id="friends-list">
            <li>
                <img class="friend-avatar" alt="Friend 1">
                <span class="friend-name"><%= specificuser.Friends %></span>
            </li>
            <!-- ... (Repeat for other friends) ... -->
        </ul>
        <div id="details">
            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam eget velit eget mauris ultricies facilisis.</p>
        </div>
        <button class="edit-button" onclick="toggleEditMode('details')">Edit</button>
</form>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
    <script>
document.getElementById('profile-image-input').addEventListener('change', handleImageSelection);

function handleImageSelection(event) {
  const selectedFile = event.target.files[0]; // Get the first selected file

  openCropModal(selectedFile);
}
    
function openCropModal() {
  const cropContainer = document.getElementById('crop-container');
  cropContainer.style.display = 'block';

  const croppingImage = document.getElementById('cropping-image');

  // Construct the URL of the processed image based on the logic you used
  const thumbnailFilename = "<%= specificuser.thumbnail %>";

  // Set the src attribute of the <img> element to the processed image URL
  croppingImage.src = thumbnailFilename;

  // Initialize the Cropper.js instance for cropping
  const cropper = new Cropper(croppingImage, {
    aspectRatio: 1, // Set the aspect ratio (e.g., 1 for a square)
    viewMode: 2,   // Set the cropping view mode
  });


  // Handle the "Crop and Save" button click
  const cropButton = document.getElementById('crop-button');
  cropButton.addEventListener('click', () => {
    // Get the cropped image data and save it
    const croppedImage = cropper.getCroppedCanvas().toDataURL();
    // Call a function to save the cropped image (e.g., postImageChanges(croppedImage))
    // Close the cropping interface
    closeCropModal();
  });
}
        function toggleEditMode(section) {
    const sectionElement = document.getElementById(section);
    const editButton = document.querySelector(`button.edit-button[onclick="toggleEditMode('${section}')"]`);
    const profileImage = document.getElementById('profile-image');
    const imageInput = document.getElementById('profile-image-input');

    function handleProfileImageSelection() {
  const imageInput = document.getElementById('profile-image-input');
  imageInput.addEventListener('change', () => {
    const selectedFile = imageInput.files[0];
    if (selectedFile) {
      // Show the cropping interface with the selected image
      openCropModal(selectedFile);
    }
  });
}

// Function to close the cropping interface
function closeCropModal() {
  const cropContainer = document.getElementById('crop-container');
  cropContainer.style.display = 'none';
}

    if (sectionElement.contentEditable === 'true') {
        // Exiting edit mode
        sectionElement.contentEditable = 'false';
        editButton.textContent = 'Edit';
        sectionElement.classList.remove('edit-mode');

        // Check if it's an image section (profile-image)
        if (section === 'profile-image') {
            // Handle image cropping and save the changes
            if (cropper) {
                const croppedImage = cropper.getCroppedCanvas().toDataURL(); // Get the cropped image
                postImageChanges(croppedImage); // Send the new image to the server
                cropper.destroy(); // Destroy the Cropper instance
            }
        } else {
            // Save the changes to the server here (call postProfileChanges) for text sections
            const content = sectionElement.textContent;
            postProfileChanges(section, content);
        }
    } else {
        // Entering edit mode
        sectionElement.contentEditable = 'true';
        editButton.textContent = 'Save';
        sectionElement.classList.add('edit-mode');

        // If it's an image section, initialize the Cropper.js instance
        if (section === 'profile-image') {
            // Initialize the Cropper.js instance for the current image
            cropper = new Cropper(profileImage, {
                aspectRatio: 1, // Set the aspect ratio (e.g., 1 for a square)
                viewMode: 2,   // Set the cropping view mode
            });
        }
    }
}

function postImageChanges(croppedImage) {
    const formData = new FormData();
    const fileBlob = dataURLtoBlob(croppedImage);

    // Append the file to the form data with the name 'profilePicture'
    formData.append('profilePicture', fileBlob, 'profile.jpg');

    // Send the form data to the server
    fetch('/upload-profile-picture', {
        method: 'POST',
        body: formData,
    })
    .then(response => response.json())
    .then(data => {
        console.log(data); // Handle the server's response (e.g., success message)
    })
    .catch(error => {
        console.error('Error uploading profile picture:', error);
    });
}

// Helper function to convert a data URL to a Blob
function dataURLtoBlob(dataURL) {
    const parts = dataURL.split(';base64,');
    const contentType = parts[0].split(':')[1];
    const raw = window.atob(parts[1]);
    const uInt8Array = new Uint8Array(raw.length);

    for (let i = 0; i < raw.length; ++i) {
        uInt8Array[i] = raw.charCodeAt(i);
    }

    return new Blob([uInt8Array], { type: contentType });
}

// Function to save changes for text sections (e.g., name, email, details)
function postProfileChanges(section, content) {
    // Send the updated text content to the server for storage and update the user's profile data
    // You can use AJAX or another method to send the text data to the server
    // Example: You might use fetch() to send a POST request to the server with the text data
    // ...

    // Once the server updates the text content, you can also update the section content in the DOM
    const sectionElement = document.getElementById(section);
    sectionElement.textContent = content;
}
    </script>
<%- include('../public/partials/footer'); -%>